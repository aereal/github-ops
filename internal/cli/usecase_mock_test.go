// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aereal/github-ops/internal/domain (interfaces: SecretRegistrationService)

// Package cli_test is a generated GoMock package.
package cli_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/aereal/github-ops/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretRegistrationService is a mock of SecretRegistrationService interface.
type MockSecretRegistrationService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretRegistrationServiceMockRecorder
	isgomock struct{}
}

// MockSecretRegistrationServiceMockRecorder is the mock recorder for MockSecretRegistrationService.
type MockSecretRegistrationServiceMockRecorder struct {
	mock *MockSecretRegistrationService
}

// NewMockSecretRegistrationService creates a new mock instance.
func NewMockSecretRegistrationService(ctrl *gomock.Controller) *MockSecretRegistrationService {
	mock := &MockSecretRegistrationService{ctrl: ctrl}
	mock.recorder = &MockSecretRegistrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretRegistrationService) EXPECT() *MockSecretRegistrationServiceMockRecorder {
	return m.recorder
}

// RegisterSecret mocks base method.
func (m *MockSecretRegistrationService) RegisterSecret(ctx context.Context, request domain.SecretRegistrationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSecret", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSecret indicates an expected call of RegisterSecret.
func (mr *MockSecretRegistrationServiceMockRecorder) RegisterSecret(ctx, request any) *MockSecretRegistrationServiceRegisterSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSecret", reflect.TypeOf((*MockSecretRegistrationService)(nil).RegisterSecret), ctx, request)
	return &MockSecretRegistrationServiceRegisterSecretCall{Call: call}
}

// MockSecretRegistrationServiceRegisterSecretCall wrap *gomock.Call
type MockSecretRegistrationServiceRegisterSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretRegistrationServiceRegisterSecretCall) Return(arg0 error) *MockSecretRegistrationServiceRegisterSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretRegistrationServiceRegisterSecretCall) Do(f func(context.Context, domain.SecretRegistrationRequest) error) *MockSecretRegistrationServiceRegisterSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretRegistrationServiceRegisterSecretCall) DoAndReturn(f func(context.Context, domain.SecretRegistrationRequest) error) *MockSecretRegistrationServiceRegisterSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
