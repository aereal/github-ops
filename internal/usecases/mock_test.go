// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aereal/github-ops/internal/domain (interfaces: RepositoryService,EncryptionService)

// Package usecases_test is a generated GoMock package.
package usecases_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/aereal/github-ops/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryService is a mock of RepositoryService interface.
type MockRepositoryService struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryServiceMockRecorder
	isgomock struct{}
}

// MockRepositoryServiceMockRecorder is the mock recorder for MockRepositoryService.
type MockRepositoryServiceMockRecorder struct {
	mock *MockRepositoryService
}

// NewMockRepositoryService creates a new mock instance.
func NewMockRepositoryService(ctrl *gomock.Controller) *MockRepositoryService {
	mock := &MockRepositoryService{ctrl: ctrl}
	mock.recorder = &MockRepositoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryService) EXPECT() *MockRepositoryServiceMockRecorder {
	return m.recorder
}

// CreateOrUpdateSecret mocks base method.
func (m *MockRepositoryService) CreateOrUpdateSecret(ctx context.Context, repo domain.Repository, secret domain.EncryptedSecret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateSecret", ctx, repo, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateSecret indicates an expected call of CreateOrUpdateSecret.
func (mr *MockRepositoryServiceMockRecorder) CreateOrUpdateSecret(ctx, repo, secret any) *MockRepositoryServiceCreateOrUpdateSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateSecret", reflect.TypeOf((*MockRepositoryService)(nil).CreateOrUpdateSecret), ctx, repo, secret)
	return &MockRepositoryServiceCreateOrUpdateSecretCall{Call: call}
}

// MockRepositoryServiceCreateOrUpdateSecretCall wrap *gomock.Call
type MockRepositoryServiceCreateOrUpdateSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryServiceCreateOrUpdateSecretCall) Return(arg0 error) *MockRepositoryServiceCreateOrUpdateSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryServiceCreateOrUpdateSecretCall) Do(f func(context.Context, domain.Repository, domain.EncryptedSecret) error) *MockRepositoryServiceCreateOrUpdateSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryServiceCreateOrUpdateSecretCall) DoAndReturn(f func(context.Context, domain.Repository, domain.EncryptedSecret) error) *MockRepositoryServiceCreateOrUpdateSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPublicKey mocks base method.
func (m *MockRepositoryService) GetPublicKey(ctx context.Context, repo domain.Repository) (*domain.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", ctx, repo)
	ret0, _ := ret[0].(*domain.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockRepositoryServiceMockRecorder) GetPublicKey(ctx, repo any) *MockRepositoryServiceGetPublicKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockRepositoryService)(nil).GetPublicKey), ctx, repo)
	return &MockRepositoryServiceGetPublicKeyCall{Call: call}
}

// MockRepositoryServiceGetPublicKeyCall wrap *gomock.Call
type MockRepositoryServiceGetPublicKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryServiceGetPublicKeyCall) Return(arg0 *domain.PublicKey, arg1 error) *MockRepositoryServiceGetPublicKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryServiceGetPublicKeyCall) Do(f func(context.Context, domain.Repository) (*domain.PublicKey, error)) *MockRepositoryServiceGetPublicKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryServiceGetPublicKeyCall) DoAndReturn(f func(context.Context, domain.Repository) (*domain.PublicKey, error)) *MockRepositoryServiceGetPublicKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEncryptionService is a mock of EncryptionService interface.
type MockEncryptionService struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionServiceMockRecorder
	isgomock struct{}
}

// MockEncryptionServiceMockRecorder is the mock recorder for MockEncryptionService.
type MockEncryptionServiceMockRecorder struct {
	mock *MockEncryptionService
}

// NewMockEncryptionService creates a new mock instance.
func NewMockEncryptionService(ctrl *gomock.Controller) *MockEncryptionService {
	mock := &MockEncryptionService{ctrl: ctrl}
	mock.recorder = &MockEncryptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptionService) EXPECT() *MockEncryptionServiceMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockEncryptionService) Encrypt(plaintext []byte, publicKey *domain.PublicKey) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", plaintext, publicKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptionServiceMockRecorder) Encrypt(plaintext, publicKey any) *MockEncryptionServiceEncryptCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptionService)(nil).Encrypt), plaintext, publicKey)
	return &MockEncryptionServiceEncryptCall{Call: call}
}

// MockEncryptionServiceEncryptCall wrap *gomock.Call
type MockEncryptionServiceEncryptCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptionServiceEncryptCall) Return(arg0 string, arg1 error) *MockEncryptionServiceEncryptCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptionServiceEncryptCall) Do(f func([]byte, *domain.PublicKey) (string, error)) *MockEncryptionServiceEncryptCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptionServiceEncryptCall) DoAndReturn(f func([]byte, *domain.PublicKey) (string, error)) *MockEncryptionServiceEncryptCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
